# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
# Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии или из документации к языку

big_str = ("И снова строки , но на этот раз как массивы символов ."
" Часть рассмотренной для списков информации аналогична и для строки ."
" Например, обращение к элементу строки по индексу в квадратных скобках ,"
" срезы строк и т.п. При этом стоит помнить ,что строка неизменяема."
" Как и у списка , строка поддерживает методы count для подсчёта вхождения и index"
" для поиска элемента . Но у строки появился и новый метод find . Он работает аналогично"
" index . Но если искомая подстрока отсутствует , вместо ошибки возвращает -1"
" Для разворота строки используется обратный срез , как и в случае со списком ."
" Форматирование с использованием символа % является старым способом указания"
" формата . Его вы можете встретить в коде , который писали очень давно . В"
" настоящее время он используется лишь в некоторых модулях для задания формата"
" вывода данных . В строке текста используется знак % с символом типа после него . s — строка ,"
" d — число и т.п. После строки указывается символ % и перечисляются переменные . Если переменных"
" больше одной , они заключаются в круглые скобки и разделяются запятой — передаётся кортеж ."
" В строке используются фигурные скобки как место для подстановки значений ."
" Далее для строки вызывается метод format . В качестве аргументов метод получает"
" нужное количество переменных . Начиная с Python 3.7 для форматирования текста используют"
" f- строки . работают быстрее , чем старые способы форматирования . А разработчики языка предлагают"
" сделать их строками по умолчанию в одном из будущих релизов . f- строки похожи на более короткую"
" и читаемую запись метода формат . При работе с текстом можно быстро менять строчные буквы на прописные и"
" наоборот . upper — все символы  строки приводятся к верхнему регистру"
" lower — все символы строки приводятся к нижнему регистру"
" title — первый символ каждого слова (разделитель слов - пробел) приводится к верхнему регистру ,"
" остальные символы к нижнему"
" capitalize — первый символ строки в верхнем регистре , остальные в нижнем")
from collections import Counter

big_str.lower
words = big_str.split(' ')
#print(words)
list1 =list(words)
#print(list1)
dict = Counter(list1)
print(dict)

new_dict ={}
for key, value in dict.items():
    if value > 10:
        new_dict[key] = value

del new_dict[',']
del new_dict['.']

print(new_dict)
