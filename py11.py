"""–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
üìå –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
üìå –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (time.time)"""
import time

# class MyString(str):
#     """ MySrtring  –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏, –µ–µ –∞–≤—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è"""
#     def __init__(self, value: str, author: str):
#         self.value = value
#         self.author = author
        
#     def __new__(cls, value: str, author: str):
#         """ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞"""
#         instance = super().__new__(cls, value)
#         instance.author = author
#         instance.time = time.time()
#         return instance
    
#     def __str__(self) -> str:
#         """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#         return f'My srtring is :{self.value}\n Time is: {time.time()} \n Author is: {self.author}'
   
#     def __repr__(self):
#         """–í—ã–≤–æ–¥ –±–ª–∏–∑–∫–æ–≥–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
#         return f'MyString({self.value}, {time.time()},{self.author})'
 
# if __name__ == '__main__':
#     s = MyString("–í–µ—Å–Ω–∞ –ø—Ä–∏—à–ª–∞, –≤–µ—Å–Ω–µ –¥–æ—Ä–æ–≥—É!", "–¢—é—Ç—á–µ–≤")
#     print(s)
#     print(repr(s))
#     # print(s.time)
#     # print(s.author)

"""–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É. 
–ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤-–∞—Ä—Ö–∏–≤–æ–≤
list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞  """

# class Archive():
#     """ An Archive class with numbers and values. """
#     _one = None
#     def __init__(self, num: int, val: str) -> None:
#         """Added num and val parameters. """
#         self.num = num
#         self.val = val
    
#     def __new__(cls, *args, **kwargs):
#         """ Created mew lists for num and val, appended lists with numbers and values. """
#         if cls._one is None:
#             cls._one = super().__new__(cls)
#             cls._one.numbers = []
#             cls._one.values = []
#         else:
#             cls._one.numbers.append(cls._one.num)
#             cls._one.values.append(cls._one.val)
#         return cls._one
    
# s = Archive(123, '123355')
# print(s.numbers, s.values)

# s = Archive(5887, 'Hello')
# print(s.numbers, s.values)

# s = Archive(8952, 'Hi')
# print(s.numbers, s.values)

# #help(Archive)#–≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª

"""–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤ –∏–∑ –∑–∞–¥–∞—á–∏ 2.
üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """

# class Archive():
#     _one = None
#     def __init__(self, num: int, val: str) -> None:
#         self.num = num
#         self.val = val
    
#     def __new__(cls, *args, **kwargs):
        
#         if cls._one is None:
#             cls._one = super().__new__(cls)
#             cls._one.numbers = []
#             cls._one.values = []
#         else:
#             cls._one.numbers.append(cls._one.num)
#             cls._one.values.append(cls._one.val)
#         return cls._one
    
#     def __str__(self):
#         return f'–ü–∞—Ä—ã —Å–≤–æ–π—Å—Ç–≤ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ "{self.num}", "{self.val}"'

#     def __repr__(self):
#          return f'Archive({self.num}, {self.val})'
    
# s = Archive(123, '123355')
# print(s.numbers, s.values)
# print(s)
# print(repr(s))

# s = Archive(5887, 'Hello')
# print(s.numbers, s.values)

# s = Archive(8952, 'Hi')
# print(s.numbers, s.values)

# print(s)#–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è

"""–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è. 
–ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞. –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
–ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
class Rectangle:
    """ –∫–ª–∞—Å—Å Rectangle –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å, –¥–ª–∏–Ω—É, 
    —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏ –≤—ã—á–∏—Ç–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ä—Ç—Ä—ã"""

    def __init__(self, side_a: float, side_b=None):
        """–∑–∞–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞"""
        self.side_a = side_a
        if side_b is None:
            self.side_b = side_a
        else:
            self.side_b = side_b

    def square_rectangle(self):
        """—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        return self.side_a * self.side_b

    def len_rectangle(self):
        """—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        return (self.side_a + self.side_b) * 2
    
    def __add__(self, other):
        """—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        a = self.side_a + other.side_a
        b = self.side_b + other.side_b
        return Rectangle(a, b)
    
    def __sub__(self, other):
        """–≤—ã—á–∏—Ç–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"""
        if self.len_rectangle() < other.len_rectangle():
            self, other = other, self
        a = self.side_a - other.side_a
        b = self.side_b - other.side_b
        return Rectangle(a, b)
    def __str__(self):
         return f'–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–Ω–∞ "{self.side_a}", –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–Ω–∞ "{self.side_b}"'

    def __repr__(self):
        return f'Rectangle({self.side_a}, {self.side_b})'


rect = Rectangle(5, 10)
#print(rect.len_rectangle(), rect.square_rectangle())
rec1 = Rectangle(4, 8)
rec2 = rect + rec1
print(rect.len_rectangle(),rec1.len_rectangle(),rec2.len_rectangle(),)
rec3 = rect - rec1
print(rect.len_rectangle(),rec1.len_rectangle(),rec3.len_rectangle())
print(f'–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–Ω–∞ {rec2.side_a} –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–Ω–∞ {rec2.side_b}')

print(rec1)
print(repr(rec1))

# print(f'{rec1 = }')

# class Triangle:
#     def __init__(self, a, b, c):
#         self.a = a
#         self.b = b
#         self.c = c
#     def __str__(self):
#         return f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: {self.a}, {self.b}, {self.c}'
#     def __eq__(self, other):
#         first = sorted((self.a, self.b, self.c))
#         second = sorted((other.a, other.b, other.c))
#         return first == second
# one = Triangle(3, 4, 5)
# two = one
# three = Triangle(3, 4, 5)
# four = Triangle(4, 3, 5)
# print(f'{one == two = }')
# print(f'{one == three = }')
# print(f'{one == four = }')
# print(f'{one != one = }')



