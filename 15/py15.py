"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å."""

import logging

# FORMAT = '{asctime} {levelname} {funcName}->{lineno}: {msg}'
# logging.basicConfig(level=logging.ERROR, filename='C:\\Users\\alexa\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\15\\ZeroDivisionError.log', encoding='utf-8',
#                     format=FORMAT, style="{")
# logger = logging.getLogger(__name__)


# def func_div_two(a, b) -> float:
#     try:
#         res = a / b
#     except ZeroDivisionError as e:
#         logger.error(f'–û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ {a} –Ω–∞ —á–∏—Å–ª–æ {b}')
#         return float('inf')
#     return res


# if __name__ == '__main__':
#     print(func_div_two(8, 0))

"""–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
 –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª. 
 –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.
 3.–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ 
 —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
–ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á json —Å–ª–æ–≤–∞—Ä—è.–î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
"""

# FORMAT = '{asctime} {levelname} {funcName}->{lineno}: {msg}'
# logging.basicConfig(level=logging.INFO, filename='C:\\Users\\alexa\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\15\\deco1.log', encoding='utf-8', style="{")
# logger = logging.getLogger(__name__)

# def deco_file(func):
#     data = []
#     def wrapper(*args, **kwargs):
        
#         new_data = {'args': args, **kwargs}
#         result = func(*args, **kwargs)
#         data.append(new_data)
#         # print(new_data)
#         logger.info(new_data)
#         return result
#     return wrapper

# @deco_file
# def call(*args, **kwargs):
#     pass

# call(12, 24, 56, ax = 12, b = 45)

"""–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ: ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞), ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞, ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""

# FORMAT = '{levelname} - {asctime} : {msg}'
# logging.basicConfig(level=logging.INFO, filename='C:\\Users\\alexa\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\15\\deco1.log', encoding='utf-8', format=FORMAT, style="{")
# logger = logging.getLogger(__name__)

# def deco_file(func):
#     data = []
#     def wrapper(*args, **kwargs):
        
#         new_data = {'args': args, **kwargs}
#         result = func(*args, **kwargs)
#         data.append(new_data)
#         # print(new_data)
#         logger.info(f' {func.__name__}{new_data}')
#         return result
#     return wrapper

# @deco_file
# def call(*args, **kwargs):
#     pass

# call(12, 24, 56, ax = 12, b = 45)

"""–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É."""

from datetime import datetime
from calendar import monthrange

FORMAT = '{asctime} {levelname} {funcName}->{lineno}: {msg}'
logging.basicConfig(level=logging.ERROR, filename='C:\\Users\\alexa\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\15\\data_text.log', encoding='utf-8',
                    format=FORMAT, style="{")
logger = logging.getLogger(__name__)

MONTH = ('—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è','–¥–µ–∫')
DAY = ("–ø–æ–Ω", "–≤—Ç–æ", "—Å—Ä–µ", "—á–µ—Ç", "–ø—è—Ç", "—Å—É–±","–≤–æ—Å")


def data_text(text: str) -> datetime:
    try:
        count, day, month = text.split()
    except ValueError as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞—Ç—ã')
        return None
    #—Å—Ä–µ–∑—ã –ø–æ –¥–∞—Ç–µ –∏ –º–µ—Å—è—Ü—É
    count = int(count[:-2])
    day = DAY.index(day[:3])
    month = MONTH.index(month[:3]) + 1
    # —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    year = datetime.now().year
    #  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –∫–æ—Ä—Ç–µ–∂ c –ø–µ—Ä–≤—ã–º —Ä–∞–±–æ—á–µ–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ year –∏ –º–µ—Å—è—Ü–∞ month
    count_days = monthrange(year, month)[1]
    # print(count_days)
    count_week = 0
    for d in range(1, count_days+1):
        date = datetime(day= d, month= month, year= year)
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ int
        if date.weekday() == day:
            # print(date)
            count_week += 1
            if count == count_week:
                return date

print(data_text('3-—è —Å—Ä–µ–¥–∞ –º–∞—è'))

 